{"version":3,"sources":["components/Proportion.js","App.js","serviceWorker.js","index.js"],"names":["Proportion","props","state","newIngredient","newQuantity","items","handleChange","bind","addNewItem","removeItem","changeQuantity","newItem","id","_","ingredient","this","quantity","parseFloat","length","push","setState","index","findIndex","item","splice","e","value","target","name","find","i","currentItem","className","class","map","key","placeholder","type","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eea3e179.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Component } from \"react\";\r\n\r\nimport * as _ from \"lodash\";\r\n\r\nimport \"./Proportion.scss\";\r\n\r\nexport class Proportion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newIngredient: \"\",\r\n      newQuantity: \"\",\r\n      items: []\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.addNewItem = this.addNewItem.bind(this);\r\n    this.removeItem = this.removeItem.bind(this);\r\n    this.changeQuantity = this.changeQuantity.bind(this);\r\n  }\r\n\r\n  addNewItem() {\r\n    const newItem = {\r\n      id: _.uniqueId(),\r\n      ingredient: this.state.newIngredient,\r\n      quantity: parseFloat(this.state.newQuantity),\r\n      newQuantity: 0\r\n    };\r\n\r\n    const items = [...this.state.items];\r\n\r\n    if (items.length) {\r\n      const quantity = items[0].quantity;\r\n      const newQuantity = items[0].newQuantity;\r\n\r\n      newItem.newQuantity = newItem.quantity * (newQuantity / quantity);\r\n    }\r\n\r\n    items.push(newItem);\r\n\r\n    this.setState({\r\n      newIngredient: \"\",\r\n      newQuantity: \"\",\r\n      items: items\r\n    });\r\n  }\r\n\r\n  removeItem(id) {\r\n    const index = this.state.items.findIndex(item => {\r\n      return item.id === id;\r\n    });\r\n\r\n    const items = [...this.state.items];\r\n    items.splice(index, 1);\r\n\r\n    this.setState({\r\n      items\r\n    });\r\n  }\r\n\r\n  handleChange(e) {\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  changeQuantity(e, id) {\r\n    const value = parseFloat(e.target.value);\r\n    const items = [...this.state.items];\r\n    const item = items.find(item => item.id === id);\r\n    const newItem = item;\r\n    newItem.newQuantity = value;\r\n\r\n    for (let i=0; i<items.length; i++) {\r\n      const currentItem = items[i];\r\n      if (currentItem.id === id) {\r\n        continue;\r\n      }\r\n\r\n      currentItem.newQuantity = currentItem.quantity * (newItem.newQuantity / newItem.quantity);\r\n    }\r\n\r\n    this.setState({\r\n      items\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Proportion\">\r\n        <h2 className=\"is-size-2\">Proporzioni</h2>\r\n        <div class=\"ingredients\">\r\n          <div class=\"headers columns\">\r\n            <span class=\"column has-text-weight-bold\">Ingrediente</span>\r\n            <span class=\"column has-text-weight-bold\">Quantità</span>\r\n            <span class=\"column has-text-weight-bold\">Nuova Quantità</span>\r\n            <span class=\"column\"></span>\r\n          </div>\r\n          {this.state.items.map(item => (\r\n            <div key={item.id} className=\"columns\">\r\n              <span className=\"column has-text-weight-bold\">{item.ingredient}</span>\r\n              <span className=\"column\">{item.quantity}</span>\r\n              <input placeholder=\"nuova quantità\"\r\n                className=\"input column has-text-danger\"\r\n                name=\"editedQuantity\"\r\n                type=\"number\"\r\n                value={item.newQuantity}\r\n                onChange={e => this.changeQuantity(e, item.id)}\r\n                />\r\n              <div>\r\n                <button className=\"button\" onClick={e => this.removeItem(item.id)}>Rimuovi</button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div>\r\n          <input placeholder=\"Ingrediente\"\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"newIngredient\"\r\n            value={this.state.newIngredient}\r\n            onChange={this.handleChange}\r\n            />\r\n          <input placeholder=\"Quantità\"\r\n            className=\"input\"\r\n            type=\"number\"\r\n            name=\"newQuantity\"\r\n            value={this.state.newQuantity}\r\n            onChange={this.handleChange}\r\n            />\r\n          <button className=\"button add-button\" onClick={this.addNewItem}>Aggiungi</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.scss';\n\nimport {Proportion} from \"./components/Proportion\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Proportion />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}